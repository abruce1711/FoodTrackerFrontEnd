@page "/storage/{StorageName}"
@using foodTrackerFrontEnd.Interfaces;
@using foodTrackerFrontEnd.Models;
@inject IFoodStorageService _storageService;
@inject IFoodTrackerApiService<FoodItem> _foodService;
@inject NavigationManager _navigationManager;

<h1>@System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(StorageName)</h1>
<AuthorizeView>
    <Authorized>
        @if (itemsLoading)
        {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            @foreach (var item in items)
            {
                        <p>@item.Name</p>
            }
        }
    </Authorized>
    <NotAuthorized>
        Welcome to Food Expiry Tracker! Please log in to add items
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string StorageName { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<FoodItem> items;
    private bool itemsLoading = true;


    protected override async Task OnParametersSetAsync()
    {
        itemsLoading = true;
        var storageId = await _storageService.GetStorageId(StorageName);
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (string.IsNullOrEmpty(storageId))
        {
            _navigationManager.NavigateTo("/");
        }

        if (user.Identity.IsAuthenticated)
        {
            items = new List<FoodItem>();
            items = await _foodService.List(storageId);
        }

        itemsLoading = false;
    }
}
