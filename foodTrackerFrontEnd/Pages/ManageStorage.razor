@page "/storage"
@using foodTrackerFrontEnd.Interfaces;
@using foodTrackerFrontEnd.Models;
@using foodTrackerFrontEnd.Pages.Modals;
@inject IFoodTrackerApiService<FoodStorage> _storageService;
@inject IFoodTrackerApiService<FoodItem> _foodService;
@inject IDialogService DialogService;
@inject NavigationManager _navigationManager;

@inject AppState AppState
@implements IDisposable

<h1>Manage Storage</h1>
<AuthorizeView>
    <Authorized>
        @if (itemsLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <MudButton Class="mb-4" @onclick="@(() => OpenDialog())" Variant="Variant.Filled" Color="Color.Primary">
                Add Item
            </MudButton>
            @foreach (var storage in AppState.StorageList)
            {
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@storage.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton OnClick="@(() => OpenDialog(storage))" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                            <MudIconButton OnClick="@(() => ConfirmDelete(storage))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                        </CardHeaderActions>
                    </MudCardHeader>
                </MudCard>
            }
        }
    </Authorized>
    <NotAuthorized>
        Welcome to Food Expiry Tracker! Please log in to add items
    </NotAuthorized>
</AuthorizeView>

@code {

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool itemsLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        itemsLoading = true;
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var storageList = await _storageService.List();
            AppState.SetStorageList(storageList.ToList());
        }

        itemsLoading = false;
    }

    private async void OpenDialog(FoodStorage storage = null)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogParams = new DialogParameters();

        string dialogTitle = $"Add Storage";

        if (storage != null)
        {
            dialogParams.Add("StorageToEdit", storage);
            dialogTitle = $"Editing {storage.Name}";
        }

        var dialog = DialogService.Show<AddStorage>(dialogTitle, dialogParams, closeOnEscapeKey);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            this.StateHasChanged();
        }
    }

    private async void ConfirmDelete(FoodStorage item)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogParams = new DialogParameters();
        dialogParams.Add("Item", item);

        var dialog = DialogService.Show<StorageDeleteConfirm>("Confirm Delete", dialogParams, closeOnEscapeKey);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            this.StateHasChanged();
        }
    }
}
