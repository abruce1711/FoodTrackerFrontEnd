@using foodTrackerFrontEnd.Interfaces;
@using foodTrackerFrontEnd.Models;
@using foodTrackerFrontEnd.Pages.Modals;
@inject IFoodStorageService _storageService;
@inject IDialogService DialogService;

<MudNavMenu>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>
            <MudNavGroup Title="Storage" Expanded="true">
                @if (storageLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else
                {
                    @foreach (var storage in _storageService.LocalList)
                    {
                        <MudNavLink Bla="abc" href="@($"storage/{storage.Name.ToLower()}")" >@storage.Name</MudNavLink>
                    }
                }
            </MudNavGroup>
            <MudNavLink OnClick="@(() => OpenAddStorageDialog())">Add Storage</MudNavLink>
            <MudNavLink Href="#" Match="NavLinkMatch.Prefix">Account</MudNavLink>
            <MudNavLink Href="/logout" Match="NavLinkMatch.Prefix">Logout</MudNavLink>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="@AuthStateProvider.LoginUrl()" Match="NavLinkMatch.Prefix">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool storageLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await _storageService.List();
        }

        storageLoading = false;
    }

    private async void OpenAddStorageDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogParams = new DialogParameters();
        dialogParams.Add("StorageService", _storageService);
        var dialog = DialogService.Show<AddStorage>("Add Storage", dialogParams, closeOnEscapeKey);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            this.StateHasChanged();
        }
    }
}