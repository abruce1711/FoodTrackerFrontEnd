@using foodTrackerFrontEnd.Interfaces;
@using foodTrackerFrontEnd.Models;
@using foodTrackerFrontEnd.Pages
@using foodTrackerFrontEnd.ViewModels;
@inherits LayoutComponentBase;
@inject AppState AppState;
@implements IDisposable;
@inject IHouseholdService _householdService;

<MudThemeProvider Theme="FoodTrackerCustomTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudText Typo="Typo.h5" Class="ml-3">@AppState.AppBarHeading</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Notifications" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => GetInvites())" />
	    <MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
		    <NotificationWIndow Invites="@invites" />
	    </MudPopover>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <Nav />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-5" MaxWidth="MaxWidth.Small">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    private bool _isOpen = false;

    protected async override Task OnInitializedAsync()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private List<HouseholdInvite> invites = new();
    private async Task GetInvites()
    {
        _isOpen = !_isOpen;

        if (_isOpen)
        {
            var response = await _householdService.GetInvites();
            invites = response.ToList();
            this.StateHasChanged();
        }
    }

    MudTheme FoodTrackerCustomTheme = new MudTheme()
        {
            Palette = new Palette()
            {
                Primary = Colors.Teal.Darken2,
                Secondary = Colors.Blue.Darken1,
                AppbarBackground = Colors.Teal.Darken2,
                Success = Colors.Green.Darken1,
                Background = Colors.Grey.Lighten5
            },
        };
}